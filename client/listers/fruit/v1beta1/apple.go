/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1beta1 "zeng.dev/kube-template/apis/fruit/v1beta1"
)

// AppleLister helps list Apples.
// All objects returned here must be treated as read-only.
type AppleLister interface {
	// List lists all Apples in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.Apple, err error)
	// Apples returns an object that can list and get Apples.
	Apples(namespace string) AppleNamespaceLister
	AppleListerExpansion
}

// appleLister implements the AppleLister interface.
type appleLister struct {
	indexer cache.Indexer
}

// NewAppleLister returns a new AppleLister.
func NewAppleLister(indexer cache.Indexer) AppleLister {
	return &appleLister{indexer: indexer}
}

// List lists all Apples in the indexer.
func (s *appleLister) List(selector labels.Selector) (ret []*v1beta1.Apple, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.Apple))
	})
	return ret, err
}

// Apples returns an object that can list and get Apples.
func (s *appleLister) Apples(namespace string) AppleNamespaceLister {
	return appleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AppleNamespaceLister helps list and get Apples.
// All objects returned here must be treated as read-only.
type AppleNamespaceLister interface {
	// List lists all Apples in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.Apple, err error)
	// Get retrieves the Apple from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.Apple, error)
	AppleNamespaceListerExpansion
}

// appleNamespaceLister implements the AppleNamespaceLister
// interface.
type appleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Apples in the indexer for a given namespace.
func (s appleNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.Apple, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.Apple))
	})
	return ret, err
}

// Get retrieves the Apple from the indexer for a given namespace and name.
func (s appleNamespaceLister) Get(name string) (*v1beta1.Apple, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("apple"), name)
	}
	return obj.(*v1beta1.Apple), nil
}
